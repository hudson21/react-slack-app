Chrome Store
---------------------------
Install Redux dev tools
React Developer tools
---------------------------

github.com/reedbarger/react-slack-clone

remove git files:
+ rm -rf .git

--------------------> Semantic UI React
https://react.semantic-ui.com/ 

--------------------> Firebase Fetching Feature
addListeners = () => {
        let loadedChannels = [];
        this.state.channelsRef.on('child_added', snap => {
            loadedChannels.push(snap.val());
            console.log(loadedChannels);
        });
};

---> deploy your app on react

now --public (with the now cli)

keycode.info

===============================================
Firebase Storage Rules

It works now 

service firebase.storage {
  match /b/react-slack-clone-69a3d.appspot.com/o {
    match /avatars {
    	match /users/{userId} {
    		allow read: if request.auth != null;
        allow write: if request.auth != null && request.auth.uid == userId && request.resource.contentType.matches('image/.*') && request.resource.size < 1 * 1024 * 1024;
    	}
    }
    
    match /chat {
    	match /public/{imagePath=**} {
      	allow read: if request.auth != null;
        allow write: if request.auth != null && request.resource.contentType.matches('image/.*') && request.resource.size < 1 * 1024 * 1024;
      }
      
      match /private/{userId1}/{userId2}/{imagePath=**} {
      	allow read: if request.auth != null && (request.auth.uid == userId1 || request.auth.uid == userId2);
        allow write: if request.auth != null && (request.auth.uid == userId1 || request.auth.uid == userId2) && request.resource.contentType.matches('image/.*') && request.resource.size < 1 * 1024 * 1024;
      }
    }
  }
}

===================================================
Firebase database Rules

{
 "rules": {
   "channels": {
     ".read": "auth != null",
     "$channelId": {
       ".write": "auth != null",
       ".validate": "newData.hasChildren(['id', 'name', 'createdBy', 'details'])",
       "id": {
         ".validate": "newData.val() === $channelId"
       },
       "name": {
         ".validate": "newData.val().length > 0"
       },
       "details": {
         ".validate": "newData.val().length > 0"
       }  
     }  
   },
   "messages": {
     "$channelId": {
       ".read": "auth != null",
       ".validate": "root.child('channels/'+$channelId).exists()",
       "$messageId": {
         ".write": "auth != null",
         ".validate": "(newData.hasChildren(['content', 'user', 'timestamp']) && !newData.hasChildren(['image'])) || (newData.hasChildren(['image', 'user', 'timestamp']) && !newData.hasChildren(['content']))",
       	 "content": {
         		".validate": "newData.val().length > 0"
       		},  
         "image": {
           ".validate": "newData.val().length > 0"
         },
         "user": {
           ".validate": "newData.hasChildren(['id', 'name', 'avatar'])"
         }
       }
     }
   },
   "privateMessages": {
     "$uid1": {
       "$uid2": {
           ".read": "auth != null && ($uid1 === auth.uid || $uid2 === auth.uid)",
           "$messageId": {
              ".write": "auth != null",
           ".validate": "(newData.hasChildren(['content', 'user', 'timestamp']) && !newData.hasChildren(['image'])) || (newData.hasChildren(['image', 'user', 'timestamp']) && !newData.hasChildren(['content']))",
           "content": {
              ".validate": "newData.val().length > 0"
            },  
           "image": {
             ".validate": "newData.val().length > 0"
           },
           "user": {
             ".validate": "newData.hasChildren(['id', 'name', 'avatar'])"
           }
         }  
       }
     }
   },
   "presence": {
     ".read": "auth != null",
     ".write": "auth != null"
   },
   "typing": {
     ".read": "auth != null",
     ".write": "auth != null"
   },
   "users": {
     ".read": "auth != null",
     "$uid": {
       ".write": "auth != null && auth.uid === $uid",
       ".validate": "newData.hasChildren(['name', 'avatar'])",
       "name": {
         ".validate": "newData.val().length > 0"
       },
       "avatar": {
         ".validate": "newData.val().length > 0"
       },
     }
   }
 }
}

========================================================================================
Depoying the React App to Firebase

1. npm install -g firebase-tools
2. firebase login 
3. firebase init (inside of the project folder)
  1. Select Database and Storage Options
  2. Select the name of your project
  3. Select database.rules.json (defaut)
  4. Select storage.rules (default)
4. Go to firebase.json (In your project)
5. npm run build 
6. Go to firebase.json
  1. {
      "hosting": {
        "public": "./build"
      },
      "database": {
        "rules": "database.rules.json"
      },
      "storage": {
        "rules": "storage.rules"
      }
    }
7. firebase deploy
  1. https://react-slack-clone-69a3d.firebaseapp.com/login
  2. https://codeartistry.io



